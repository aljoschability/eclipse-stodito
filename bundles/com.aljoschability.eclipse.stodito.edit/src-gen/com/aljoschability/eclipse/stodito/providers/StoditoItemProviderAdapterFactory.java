/**
 * <copyright>
 * 	Copyright 2013 by Aljoschability and others. All rights reserved. This program and its materials are made
 * 	available under the terms of the Eclipse Public License v1.0 which should be contained in this distribution.
 * 
 * 	Contributors:
 * 		Aljoscha Hark <aljoscha@aljoschability.com> - Initial code
 * 
 * </copyright>
 */
package com.aljoschability.eclipse.stodito.providers;

import com.aljoschability.eclipse.stodito.util.StoditoAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StoditoItemProviderAdapterFactory extends StoditoAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StoditoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.Activity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityItemProvider activityItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.Activity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityAdapter() {
		if (activityItemProvider == null) {
			activityItemProvider = new ActivityItemProvider(this);
		}

		return activityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.CallNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallNodeItemProvider callNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.CallNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallNodeAdapter() {
		if (callNodeItemProvider == null) {
			callNodeItemProvider = new CallNodeItemProvider(this);
		}

		return callNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.StoryNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoryNodeItemProvider storyNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.StoryNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoryNodeAdapter() {
		if (storyNodeItemProvider == null) {
			storyNodeItemProvider = new StoryNodeItemProvider(this);
		}

		return storyNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.StatementNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementNodeItemProvider statementNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.StatementNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementNodeAdapter() {
		if (statementNodeItemProvider == null) {
			statementNodeItemProvider = new StatementNodeItemProvider(this);
		}

		return statementNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.StructuredNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuredNodeItemProvider structuredNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.StructuredNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuredNodeAdapter() {
		if (structuredNodeItemProvider == null) {
			structuredNodeItemProvider = new StructuredNodeItemProvider(this);
		}

		return structuredNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowItemProvider controlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowAdapter() {
		if (controlFlowItemProvider == null) {
			controlFlowItemProvider = new ControlFlowItemProvider(this);
		}

		return controlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.InitialNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeItemProvider initialNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.InitialNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeAdapter() {
		if (initialNodeItemProvider == null) {
			initialNodeItemProvider = new InitialNodeItemProvider(this);
		}

		return initialNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.JunctionNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JunctionNodeItemProvider junctionNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.JunctionNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJunctionNodeAdapter() {
		if (junctionNodeItemProvider == null) {
			junctionNodeItemProvider = new JunctionNodeItemProvider(this);
		}

		return junctionNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ActivityFinalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeItemProvider activityFinalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ActivityFinalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeAdapter() {
		if (activityFinalNodeItemProvider == null) {
			activityFinalNodeItemProvider = new ActivityFinalNodeItemProvider(this);
		}

		return activityFinalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.FlowFinalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeItemProvider flowFinalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.FlowFinalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeAdapter() {
		if (flowFinalNodeItemProvider == null) {
			flowFinalNodeItemProvider = new FlowFinalNodeItemProvider(this);
		}

		return flowFinalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.OpaqueCallable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueCallableItemProvider opaqueCallableItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.OpaqueCallable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueCallableAdapter() {
		if (opaqueCallableItemProvider == null) {
			opaqueCallableItemProvider = new OpaqueCallableItemProvider(this);
		}

		return opaqueCallableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ParameterBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterBindingItemProvider parameterBindingItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ParameterBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterBindingAdapter() {
		if (parameterBindingItemProvider == null) {
			parameterBindingItemProvider = new ParameterBindingItemProvider(this);
		}

		return parameterBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.PatternPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternPartItemProvider patternPartItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.PatternPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternPartAdapter() {
		if (patternPartItemProvider == null) {
			patternPartItemProvider = new PatternPartItemProvider(this);
		}

		return patternPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.PrimitiveOccurrence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveOccurrenceItemProvider primitiveOccurrenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.PrimitiveOccurrence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveOccurrenceAdapter() {
		if (primitiveOccurrenceItemProvider == null) {
			primitiveOccurrenceItemProvider = new PrimitiveOccurrenceItemProvider(this);
		}

		return primitiveOccurrenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ObjectOccurrence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectOccurrenceItemProvider objectOccurrenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ObjectOccurrence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectOccurrenceAdapter() {
		if (objectOccurrenceItemProvider == null) {
			objectOccurrenceItemProvider = new ObjectOccurrenceItemProvider(this);
		}

		return objectOccurrenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.CollectionOccurrence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionOccurrenceItemProvider collectionOccurrenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.CollectionOccurrence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionOccurrenceAdapter() {
		if (collectionOccurrenceItemProvider == null) {
			collectionOccurrenceItemProvider = new CollectionOccurrenceItemProvider(this);
		}

		return collectionOccurrenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.AttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeAssignmentItemProvider attributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.AttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAssignmentAdapter() {
		if (attributeAssignmentItemProvider == null) {
			attributeAssignmentItemProvider = new AttributeAssignmentItemProvider(this);
		}

		return attributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.InclusionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InclusionLinkItemProvider inclusionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.InclusionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInclusionLinkAdapter() {
		if (inclusionLinkItemProvider == null) {
			inclusionLinkItemProvider = new InclusionLinkItemProvider(this);
		}

		return inclusionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.SameLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SameLinkItemProvider sameLinkItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.SameLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSameLinkAdapter() {
		if (sameLinkItemProvider == null) {
			sameLinkItemProvider = new SameLinkItemProvider(this);
		}

		return sameLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.Path} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathItemProvider pathItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.Path}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathAdapter() {
		if (pathItemProvider == null) {
			pathItemProvider = new PathItemProvider(this);
		}

		return pathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.OclExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OclExpressionItemProvider oclExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.OclExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOclExpressionAdapter() {
		if (oclExpressionItemProvider == null) {
			oclExpressionItemProvider = new OclExpressionItemProvider(this);
		}

		return oclExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.LiteralExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralExpressionItemProvider literalExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.LiteralExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralExpressionAdapter() {
		if (literalExpressionItemProvider == null) {
			literalExpressionItemProvider = new LiteralExpressionItemProvider(this);
		}

		return literalExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.UnaryExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryExpressionItemProvider unaryExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.UnaryExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryExpressionAdapter() {
		if (unaryExpressionItemProvider == null) {
			unaryExpressionItemProvider = new UnaryExpressionItemProvider(this);
		}

		return unaryExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ArithmeticExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmeticExpressionItemProvider arithmeticExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ArithmeticExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmeticExpressionAdapter() {
		if (arithmeticExpressionItemProvider == null) {
			arithmeticExpressionItemProvider = new ArithmeticExpressionItemProvider(this);
		}

		return arithmeticExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ComparisonExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparisonExpressionItemProvider comparisonExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ComparisonExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparisonExpressionAdapter() {
		if (comparisonExpressionItemProvider == null) {
			comparisonExpressionItemProvider = new ComparisonExpressionItemProvider(this);
		}

		return comparisonExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.LogicExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicExpressionItemProvider logicExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.LogicExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicExpressionAdapter() {
		if (logicExpressionItemProvider == null) {
			logicExpressionItemProvider = new LogicExpressionItemProvider(this);
		}

		return logicExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.PrimitiveOccurrenceExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveOccurrenceExpressionItemProvider primitiveOccurrenceExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.PrimitiveOccurrenceExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveOccurrenceExpressionAdapter() {
		if (primitiveOccurrenceExpressionItemProvider == null) {
			primitiveOccurrenceExpressionItemProvider = new PrimitiveOccurrenceExpressionItemProvider(this);
		}

		return primitiveOccurrenceExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ObjectOccurrenceExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectOccurrenceExpressionItemProvider objectOccurrenceExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ObjectOccurrenceExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectOccurrenceExpressionAdapter() {
		if (objectOccurrenceExpressionItemProvider == null) {
			objectOccurrenceExpressionItemProvider = new ObjectOccurrenceExpressionItemProvider(this);
		}

		return objectOccurrenceExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.ObjectAttributeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectAttributeExpressionItemProvider objectAttributeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.ObjectAttributeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectAttributeExpressionAdapter() {
		if (objectAttributeExpressionItemProvider == null) {
			objectAttributeExpressionItemProvider = new ObjectAttributeExpressionItemProvider(this);
		}

		return objectAttributeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.CollectionSizeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionSizeExpressionItemProvider collectionSizeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.CollectionSizeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionSizeExpressionAdapter() {
		if (collectionSizeExpressionItemProvider == null) {
			collectionSizeExpressionItemProvider = new CollectionSizeExpressionItemProvider(this);
		}

		return collectionSizeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.aljoschability.eclipse.stodito.CallExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallExpressionItemProvider callExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link com.aljoschability.eclipse.stodito.CallExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallExpressionAdapter() {
		if (callExpressionItemProvider == null) {
			callExpressionItemProvider = new CallExpressionItemProvider(this);
		}

		return callExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (activityItemProvider != null)
			activityItemProvider.dispose();
		if (callNodeItemProvider != null)
			callNodeItemProvider.dispose();
		if (storyNodeItemProvider != null)
			storyNodeItemProvider.dispose();
		if (statementNodeItemProvider != null)
			statementNodeItemProvider.dispose();
		if (structuredNodeItemProvider != null)
			structuredNodeItemProvider.dispose();
		if (controlFlowItemProvider != null)
			controlFlowItemProvider.dispose();
		if (initialNodeItemProvider != null)
			initialNodeItemProvider.dispose();
		if (junctionNodeItemProvider != null)
			junctionNodeItemProvider.dispose();
		if (activityFinalNodeItemProvider != null)
			activityFinalNodeItemProvider.dispose();
		if (flowFinalNodeItemProvider != null)
			flowFinalNodeItemProvider.dispose();
		if (opaqueCallableItemProvider != null)
			opaqueCallableItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (parameterBindingItemProvider != null)
			parameterBindingItemProvider.dispose();
		if (patternPartItemProvider != null)
			patternPartItemProvider.dispose();
		if (primitiveOccurrenceItemProvider != null)
			primitiveOccurrenceItemProvider.dispose();
		if (objectOccurrenceItemProvider != null)
			objectOccurrenceItemProvider.dispose();
		if (collectionOccurrenceItemProvider != null)
			collectionOccurrenceItemProvider.dispose();
		if (constraintItemProvider != null)
			constraintItemProvider.dispose();
		if (attributeAssignmentItemProvider != null)
			attributeAssignmentItemProvider.dispose();
		if (linkItemProvider != null)
			linkItemProvider.dispose();
		if (inclusionLinkItemProvider != null)
			inclusionLinkItemProvider.dispose();
		if (sameLinkItemProvider != null)
			sameLinkItemProvider.dispose();
		if (pathItemProvider != null)
			pathItemProvider.dispose();
		if (oclExpressionItemProvider != null)
			oclExpressionItemProvider.dispose();
		if (literalExpressionItemProvider != null)
			literalExpressionItemProvider.dispose();
		if (unaryExpressionItemProvider != null)
			unaryExpressionItemProvider.dispose();
		if (arithmeticExpressionItemProvider != null)
			arithmeticExpressionItemProvider.dispose();
		if (comparisonExpressionItemProvider != null)
			comparisonExpressionItemProvider.dispose();
		if (logicExpressionItemProvider != null)
			logicExpressionItemProvider.dispose();
		if (primitiveOccurrenceExpressionItemProvider != null)
			primitiveOccurrenceExpressionItemProvider.dispose();
		if (objectOccurrenceExpressionItemProvider != null)
			objectOccurrenceExpressionItemProvider.dispose();
		if (objectAttributeExpressionItemProvider != null)
			objectAttributeExpressionItemProvider.dispose();
		if (collectionSizeExpressionItemProvider != null)
			collectionSizeExpressionItemProvider.dispose();
		if (callExpressionItemProvider != null)
			callExpressionItemProvider.dispose();
	}

}
